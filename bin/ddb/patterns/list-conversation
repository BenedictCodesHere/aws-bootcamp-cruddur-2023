#!/usr/bin/env python3

import boto3
import os
import sys
import json
from datetime import datetime, timedelta, timezone

# Get the directory of the current Python script
current_path = os.path.dirname(os.path.abspath(__file__))
print("Current Path:", current_path)

# Navigate to the parent directory of the current directory (one level up)
parent_path = os.path.abspath(os.path.join(current_path, '..', '..', '..'))
print("Parent Path:", parent_path)

# Navigate to the 'backend-flask' directory from the parent directory
backend_flask_path = os.path.abspath(os.path.join(parent_path, 'backend-flask'))
print("Backend Flask Path:", backend_flask_path)

# Append the 'backend-flask' directory to the system path
sys.path.append(backend_flask_path)


from lib.db import db


attrs = {
  'endpoint_url': 'http://localhost:8000'
}

if len(sys.argv) == 2:
  if "prod" in sys.argv[1]:
    attrs = {}

dynamodb = boto3.client('dynamodb',**attrs)
table_name = 'cruddur-messages'
year = str(datetime.now().year)

def get_my_user_uuid():
    sql = """
        SELECT 
            users.uuid,
            users.handle
        FROM users
        WHERE 
            users.handle = %(handle)s 
    """
    uuid = db.query_value(sql, {
        'handle': 'KestrelBlaster'
    })
    return uuid


my_user_uuid = get_my_user_uuid()
print(f"my-uuid: {my_user_uuid}")

# define the query parameters
query_params = {
  'TableName': table_name,
  'KeyConditionExpression': 'pk = :pk AND begins_with(sk, :year)',
  'ScanIndexForward': False,
  'ExpressionAttributeValues': {
    ':year': {'S': year},
    ':pk': {'S': f"GRP#{my_user_uuid}"}
  },
  'ReturnConsumedCapacity': 'TOTAL'
}

# query the table
response = dynamodb.query(**query_params)

# print the items returned by the query
print(json.dumps(response, sort_keys=True, indent=2))